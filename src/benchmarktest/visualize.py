import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

m1l = {
    'length': [100, 1000, 10000, 100000, 1000000] * 5,
    'time': [
        53, 20, 19, 35, 205, 
        18, 19, 18, 33, 208,
        17, 17, 32, 35, 212,
        16, 17, 21, 28, 217,
        11, 16, 20, 34, 207
    ]
}

m1s = {
    'selectivity': [0.000002, 0.00002, 0.0002, 0.002, 0.02, 0.2] * 5,
    'time': [
        137, 131, 264, 141, 142, 134, 
        143, 138, 143, 220, 141, 131,
        146, 134, 148, 138, 129, 135,
        136, 137, 131, 164, 136, 145,
        132, 138, 139, 146, 213, 138
    ]
}

m2l = {
    'queries': (np.arange(1, 21).tolist()) * 15,
    'threads': [1] * 100 + [5] * 100 + [10] * 100,
    'time': [
        330, 141, 331, 189, 131, 139, 138, 147, 152, 313, 341, 277, 318, 221, 141, 136, 250, 133, 318, 140,
        153, 175, 144, 254, 148, 183, 170, 178, 213, 165, 174, 183, 171, 167, 160, 175, 179, 173, 158, 163,
        164, 158, 367, 194, 161, 190, 201, 200, 163, 177, 189, 180, 187, 170, 183, 178, 168, 173, 187, 170,
        166, 245, 188, 166, 172, 156, 164, 160, 293, 171, 198, 189, 194, 199, 160, 258, 161, 200, 173, 165,
        163, 181, 324, 174, 162, 184, 164, 185, 162, 195, 163, 171, 173, 188, 207, 169, 181, 153, 171, 153,
        355, 262, 161, 153, 363, 138, 262, 140, 165, 180, 267, 152, 328, 356, 301, 137, 138, 256, 148, 156,
        220, 185, 304, 221, 255, 215, 286, 194, 201, 246, 263, 155, 144, 312, 254, 286, 147, 329, 231, 200,
        213, 220, 202, 149, 301, 240, 151, 295, 343, 330, 243, 168, 364, 182, 350, 302, 260, 225, 324, 359,
        255, 324, 179, 333, 272, 181, 312, 294, 154, 314, 274, 179, 226, 361, 129, 195, 194, 349, 354, 298,
        346, 323, 329, 274, 347, 285, 160, 145, 148, 294, 166, 252, 264, 348, 348, 186, 145, 230, 255, 232,
        348, 160, 327, 358, 172, 156, 376, 356, 267, 261, 138, 150, 157, 153, 277, 260, 157, 192, 205, 178,
        338, 254, 215, 214, 156, 193, 210, 158, 249, 171, 328, 152, 225, 143, 184, 135, 278, 262, 201, 196,
        147, 195, 368, 158, 228, 265, 322, 219, 341, 397, 312, 179, 190, 184, 218, 199, 199, 199, 191, 241,
        192, 213, 173, 240, 173, 178, 250, 180, 188, 181, 184, 189, 182, 183, 189, 193, 178, 179, 186, 197,
        209, 197, 212, 220, 204, 232, 205, 198, 186, 188, 182, 197, 218, 198, 219, 201, 220, 247, 190, 194
    ]
}

m3l = {
    'length': ([100] * 3 + [1000] * 3 + [10000] * 3 + [100000] * 3 + [1000000] * 3) * 5,
    'index': ['scan', 'sorted', 'btree'] * 25,
    'time': [
        97, 36, 66, 73, 32, 66, 49, 42, 69, 66, 103, 49, 995, 1101, 219,  
        86, 55, 48, 89, 71, 75, 40, 54, 32, 242, 46, 73, 589, 965, 547,
        94, 35, 34, 51, 35, 36, 96, 38, 39, 134, 50, 129, 699, 277, 342,
        101, 39, 34, 61, 38, 39, 127, 40, 38, 122, 60, 56, 854, 312, 468,
        96, 35, 31, 39, 35, 35, 99, 46, 45, 182, 138, 46, 546, 420, 491
    ]
}

m3s = {
    'selectivity': ([2e-5] * 3 + [2e-4] * 3 + [2e-3] * 3 + [2e-2] * 3 + [2e-1] * 3 + [2] * 3) * 5,
    'index': ['scan', 'sorted', 'btree'] * 30,
    'time': [
        1298, 378, 395, 971, 373, 230, 908, 298, 613, 1027, 288, 208, 686, 348, 234, 1285, 364, 335,
        1327, 327, 194, 1205, 207, 376, 837, 273, 223, 676, 291, 247, 860, 275, 424, 632, 543, 248,
        924, 283, 279, 645, 458, 232, 864, 275, 245, 632, 255, 227, 586, 277, 248, 710, 304, 295,
        2541, 746, 452, 1379, 271, 382, 609, 259, 223, 578, 234, 225, 563, 234, 232, 614, 276, 236,
        2435, 664, 622, 942, 201, 335, 985, 359, 468, 817, 260, 214, 817, 424, 293, 878, 323, 325
    ]
}

m4l = {
    'length': ([100] * 2 + [1000] * 2 + [10000] * 2 + [100000] * 2 + [1000000] * 2) * 5,
    'join': ['nested-loop', 'hashjoin'] * 25,
    'time': [
        141, 259, 144, 150, 131, 134, 131, 307, 258, 171, 
        135, 218, 155, 136, 181, 162, 147, 158, 201, 185, 
        153, 156, 161, 153, 169, 171, 233, 226, 313, 238, 
        170, 156, 232, 144, 143, 142, 144, 143, 163, 176, 
        175, 171, 175, 168, 201, 180, 207, 185, 196, 208 
    ]
}

m4s = {
    'overlap': ([50] * 2 + [500] * 2 + [5000] * 2 + [50000] * 2 + [500000] * 2) * 5,
    'join': ['nested-loop', 'hashjoin'] * 25,
    'time': [
        191, 247, 237, 221, 156, 232, 321, 193, 370, 188,
        188, 179, 180, 177, 177, 182, 179, 176, 189, 183,
        183, 428, 164, 172, 247, 177, 200, 195, 234, 197,
        165, 166, 174, 174, 182, 172, 174, 166, 179, 234,
        221, 212, 219, 221, 230, 220, 222, 219, 198, 217
    ]
}

sns.barplot(data=m1l, x='length', y='time')
plt.title('Response Time(ms) VS table length')
plt.savefig('benchresult/m1_length.png')

plt.clf()
sns.barplot(data=m1s, x='selectivity', y='time')
plt.title('Response Time(ms) VS table length')
plt.savefig('benchresult/m1_selectivity.png')

plt.clf()
sns.lineplot(data=m2l, x='queries', y='time', hue='threads')
plt.title('Response Time(ms) VS #Queries')
plt.savefig('benchresult/m2_queries.png')

plt.clf()
sns.barplot(data=m3l, x='length', y='time', hue='index')
plt.title('Response Time(ms) VS table length')
plt.savefig('benchresult/m3_length.png')

plt.clf()
sns.barplot(data=m3s, x='selectivity', y='time', hue='index')
plt.title('Response Time(ms) VS Selectivity')
plt.savefig('benchresult/m3_selectivity.png')

plt.clf()
sns.barplot(data=m4l, x='length', y='time', hue='join')
plt.title('Response Time(ms) VS table length')
plt.savefig('benchresult/m4_length.png')

plt.clf()
sns.barplot(data=m4s, x='overlap', y='time', hue='join')
plt.title('Response Time(ms) VS Overlapped Size')
plt.savefig('benchresult/m4_overlap.png')
